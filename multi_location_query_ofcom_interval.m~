function [response , delay , error] =  multi_location_query_ofcom_interval...
    ( latitude_start, latitude_end, longitude_start,...
    longitude_end ,num_of_steps, distance_divider, my_path)

error=false; %Default error value
delay=[]; %Default delay value
request_type = '"AVAIL_SPECTRUM_REQ"';
server_name='https://tvwsdb.broadbandappstestbed.com/json.rpc';
text_coding='"Content-Type: application/json "';

%%
query_generator_interval...
    (request_type,latitude_start,latitude_end ,...
    longitude_start, longitude_end ,num_of_steps,distance_divider, my_path)

cmnd=['/usr/bin/curl -X POST ',server_name,' -H ',text_coding,' --data-binary @',my_path,'/ofcom.json -w %{time_total}'];
[status,response]=system(cmnd);
    
    remove_first_extra_error_lines = strfind(response,'{');
    response = response(remove_first_extra_error_lines:end);
   
    end_query_str='"BTWhiteSpacePilotV1-2013"';
    pos_end_query_str=findstr(response,end_query_str);  
    length_end_query_str=length(end_query_str)+23;
    response(pos_end_query_str+length_end_query_str:end);
    delay=str2num(response(pos_end_query_str+length_end_query_str:end));     
    response(pos_end_query_str+length_end_query_str:end)=[];

    
system('rm ofcom.json');

end

function  query_generator_interval...
    (request_type,latitude_start,latitude_end ,...
    longitude_start, longitude_end ,num_of_steps,distance_divider, my_path)
%This function will generate the json array requests along a line between
%two points

% Dividing the distance into segmets to be queried gradually 

longitude = linspace(longitude_start,longitude_end , distance_divider);
latitude = linspace(latitude_start,latitude_end , distance_divider);

% This is need it in order to dynamically add  and remove the comma to
% separate json object correctly 
    if num_of_steps > 1
        comma = ',';
    else
        comma = '';
    end

 cd([my_path,'/ofcom']);
%To start the json array
dlmwrite('ofcom.json','[','delimiter','');

for i = 1:num_of_steps 
    if i == num_of_steps
        comma='';
    end
request=['{"jsonrpc": "2.0",',...
    '"method": "spectrum.paws.getSpectrum",',...
    '"params": {',...
    '"type": ',request_type,', ',...
    '"version": "0.6", ',...
    '"deviceDesc": ',...
    '{ "manufacturerId": "TuDelft", ',...
    '"modelId": "Test", ',...
    '"serialNumber": "0001", ',...
    '"etsiEnDeviceType": "A", ',...
    '"etsiEnDeviceEmissionsClass": "3", ',...
    '"etsiEnDeviceCategory": "master", ',...
    '"etsiEnTechnologyId": "466", '...
    '"rulesetIds": [ "OfcomWhiteSpacePilotV1-2013",],}, ',...
    '"location": ',...
    '{ "point": ',...
    '{ "center": ',...
    '{"latitude": ',num2str(latitude,', '...
    '"longitude": ',longitude,'}, ',...
    '"orientation": 45, ' ,...
    '"semiMajorAxis": 50, ' ,...
    '"semiMinorAxis": 50, ' ,...
      '},}, ',...
         '"capabilities": { ',...
          '"frequencyRanges": [ {' ,...
         '"startHz": 470000000, ',...
         '"stopHz": 790000000, ',...
         '},],},',...
         '"antenna": { ',...
          '"height": 7.5, ',...
         '"heightType": "AGL" }, ',...
    '},"id": "123456789"}',comma];

    dlmwrite('ofcom.json',request,'-append','delimiter','');
end
%close the json array
dlmwrite('ofcom.json',']','-append','delimiter','');
end
